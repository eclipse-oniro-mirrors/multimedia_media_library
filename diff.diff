diff --git a/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp b/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp
index 1fd7495..8c9faf4 100644
--- a/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp
+++ b/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp
@@ -427,6 +427,11 @@ void PhotoAssetProxy::AddPhotoProxy(const sptr<PhotoProxy> &photoProxy)
         tracer.Finish();
         return;
     }
+    if (photoProxy->GetFormat() == PhotoFormat::YUV) {
+        photoProxy->Release();
+        tracer.Finish();
+        return;
+    }
     tracer.Finish();
 
     Uri openUri(uri_);
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/include/medialibrary_photo_operations.h b/frameworks/innerkitsimpl/medialibrary_data_extension/include/medialibrary_photo_operations.h
index b269f41..6b405a2 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/include/medialibrary_photo_operations.h
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/include/medialibrary_photo_operations.h
@@ -119,6 +119,7 @@ private:
 private:
     static std::mutex saveCameraPhotoMutex_;
     static std::condition_variable condition_;
+    static std::string lastPhotoId_;
 };
 
 class PhotoEditingRecord {
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_handle_service.h b/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_handle_service.h
index 84f435e..b3bcdb1 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_handle_service.h
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_handle_service.h
@@ -29,7 +29,7 @@ static const size_t AUXILIARY_PICTURE_TYPE_COUNT = static_cast<size_t>(Auxiliary
 
 class PictureHandlerService {
 public:
-    static bool OpenPicture(std::string &fileId, int32_t &fd);
+    static bool OpenPicture(const std::string &fileId, int32_t &fd);
     static int32_t RequestBufferHandlerFd(const std::string fd);
 private:
 
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp
index fb62b36..68f6f28 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp
@@ -79,10 +79,24 @@ namespace Media {
 static const string ANALYSIS_HAS_DATA = "1";
 constexpr int SAVE_PHOTO_WAIT_MS = 300;
 constexpr int TASK_NUMBER_MAX = 5;
+enum ImageFileType : int32_t {
+    JPEG = 1,
+    HEIF = 2
+};
+
+const std::string MIME_TYPE_JPEG = "image/jpeg";
+
+const std::string MIME_TYPE_HEIF = "image/heif";
+
+const std::unordered_map<ImageFileType, std::string> IMAGE_FILE_TYPE_MAP = {
+        {JPEG, MIME_TYPE_JPEG},
+        {HEIF, MIME_TYPE_HEIF},
+};
 shared_ptr<PhotoEditingRecord> PhotoEditingRecord::instance_ = nullptr;
 mutex PhotoEditingRecord::mutex_;
 std::mutex MediaLibraryPhotoOperations::saveCameraPhotoMutex_;
 std::condition_variable MediaLibraryPhotoOperations::condition_;
+std::string MediaLibraryPhotoOperations::lastPhotoId_ = "default";
 int32_t MediaLibraryPhotoOperations::Create(MediaLibraryCommand &cmd)
 {
     switch (cmd.GetApi()) {
@@ -2103,16 +2117,11 @@ int32_t MediaLibraryPhotoOperations::SavePicture(const int32_t &fileType, const
         return E_INVALID_ARGUMENTS;
     }
     std::string format = itr->second;
-    Media::ImagePacker imagePacker;
-    Media::PackOption packOption;
-    packOption.format = format;
-    packOption.needsPackProperties = true;
-    packOption.desiredDynamicRange = EncodeDynamicRange::AUTO;
-    imagePacker.StartPacking(assetPath, packOption);
-    imagePacker.AddPicture(*(picture));
-    imagePacker.FinalizePacking();
-    MEDIA_DEBUG_LOG("SavePicture end");
+    FileUtils::DealPicture(format, assetPath, picture);
+    UpdateMimeType(fileId, format);
     pictureManagerThread->FinishAccessingPicture(photoId);
+    pictureManagerThread->DeleteDataWithImageId(lastPhotoId_, LOW_QUALITY_PICTURE);
+    lastPhotoId_ = photoId;
     return E_OK;
 }
 
@@ -2146,13 +2155,14 @@ int32_t MediaLibraryPhotoOperations::AddFiltersExecute(MediaLibraryCommand& cmd,
     string photoId;
     if (GetPicture(fileId, picture, false, photoId) == E_OK) {
         string fileType = cmd.GetQuerySetParam(IMAGE_FILE_TYPE);
-        int32_t ret = AddFiltersToPicture(picture, assetPath, editData, fileType);
+        FileUtils::SavePicture(sourcePath, picture, fileType);
+        int32_t ret = MediaChangeEffect::TakeEffectForPicture(picture, editData);
         auto pictureManagerThread = PictureManagerThread::GetInstance();
         if (pictureManagerThread != nullptr) {
             pictureManagerThread->Start();
         }
         pictureManagerThread->FinishAccessingPicture(photoId);
-        MediaLibraryObjectUtils::ScanFileAsync(assetPath, to_string(fileId), MediaLibraryApi::API_10);
+        MediaLibraryObjectUtils::ScanFileAsync(sourcePath, to_string(fileId), MediaLibraryApi::API_10);
         return ret;
     }
     // 生成水印
@@ -2506,7 +2516,7 @@ int32_t MediaLibraryPhotoOperations::ProcessMultistagesPhotoForPicture(bool isEd
 }
 
 int32_t MediaLibraryPhotoOperations::AddFiltersToPhoto(const std::string &inputPath,
-    const std::string &outputPath, const std::string &editdata, const std::string &photoStatus)
+    const std::string &outputPath, const std::string &editdata, int32_t fileId, const std::string &photoStatus)
 {
     MEDIA_INFO_LOG("AddFiltersToPhoto inputPath: %{public}s, outputPath: %{public}s, editdata: %{public}s",
         inputPath.c_str(), outputPath.c_str(), editdata.c_str());
@@ -2541,6 +2551,7 @@ int32_t MediaLibraryPhotoOperations::AddFiltersToPhoto(const std::string &inputP
         return ret;
     }
     MEDIA_INFO_LOG("AddFiltersToPhoto finish");
+    MediaLibraryObjectUtils::ScanFileAsync(outputPath, to_string(fileId), MediaLibraryApi::API_10);
     return E_OK;
 }
 
@@ -2557,18 +2568,7 @@ int32_t MediaLibraryPhotoOperations::AddFiltersToPicture(std::shared_ptr<Media::
     CHECK_AND_RETURN_RET_LOG(lastSlash != string::npos && outputPath.size() > (lastSlash + 1), E_INVALID_VALUES,
         "Failed to check outputPath: %{public}s", outputPath.c_str());
     int32_t ret = MediaChangeEffect::TakeEffectForPicture(inPicture, editdata);
-    Media::ImagePacker imagePacker;
-    Media::PackOption packOption;
-    packOption.format = mime_type;
-    packOption.needsPackProperties = true;
-    packOption.desiredDynamicRange = EncodeDynamicRange::AUTO;
-    imagePacker.StartPacking(outputPath, packOption);
-    imagePacker.AddPicture(*(inPicture));
-    imagePacker.FinalizePacking();
-    if (ret != E_OK) {
-        MEDIA_ERR_LOG("MediaLibraryPhotoOperations: AddFiltersToPicture: TakeEffect error. ret = %d", ret);
-        return E_ERR;
-    }
+    FileUtils::DealPicture(mime_type, outputPath, inPicture);
     return E_OK;
 }
 
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp
index 1a2268c..9ba7d31 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp
@@ -221,10 +221,10 @@ bool PictureDataOperations::IsExsitDataForPictureType(PictureType pictureType)
     bool isExsit = false;
     switch (pictureType) {
         case LOW_QUALITY_PICTURE:
-            isExsit = lowQualityPictureMap_.size() >= 0;
+            isExsit = lowQualityPictureMap_.size() >= 1;
             break;
         case HIGH_QUALITY_PICTURE:
-            isExsit = highQualityPictureMap_.size() >= 0;
+            isExsit = highQualityPictureMap_.size() >= 1;
             break;
         default:
             break;
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_handle_service.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_handle_service.cpp
index 9401913..25ed6f1 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_handle_service.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_handle_service.cpp
@@ -33,7 +33,7 @@
 namespace OHOS {
 namespace Media {
 
-bool PictureHandlerService::OpenPicture(std::string &fileId, int32_t &fd)
+bool PictureHandlerService::OpenPicture(const std::string &fileId, int32_t &fd)
 {
     MEDIA_DEBUG_LOG("PictureHandlerService OpenPicture fileId: %{public}s", fileId.c_str());
     MessageParcel data;
diff --git a/frameworks/js/src/media_asset_manager_napi.cpp b/frameworks/js/src/media_asset_manager_napi.cpp
index 9188261..5f2e1da 100644
--- a/frameworks/js/src/media_asset_manager_napi.cpp
+++ b/frameworks/js/src/media_asset_manager_napi.cpp
@@ -82,7 +82,7 @@ napi_value MediaAssetManagerNapi::Init(napi_env env, napi_value exports)
             DECLARE_NAPI_STATIC_FUNCTION("requestVideoFile", JSRequestVideoFile),
             DECLARE_NAPI_STATIC_FUNCTION("cancelRequest", JSCancelRequest),
             DECLARE_NAPI_STATIC_FUNCTION("loadMovingPhoto", JSLoadMovingPhoto),
-            DECLARE_NAPI_STATIC_FUNCTION("requestEfficientImage", JSRequestEfficientIImage)
+            DECLARE_NAPI_STATIC_FUNCTION("quickRequestImage", JSRequestEfficientIImage)
         }};
         MediaLibraryNapiUtils::NapiDefineClass(env, exports, info);
         return exports;
diff --git a/frameworks/services/media_multistages_capture/include/utils/file_utils.h b/frameworks/services/media_multistages_capture/include/utils/file_utils.h
index 0e346bd..f49f034 100644
--- a/frameworks/services/media_multistages_capture/include/utils/file_utils.h
+++ b/frameworks/services/media_multistages_capture/include/utils/file_utils.h
@@ -31,6 +31,8 @@ public:
         std::shared_ptr<Media::Picture> &picture, bool isEdited = false);
     EXPORT static int32_t SavePicture(const std::string &path, std::shared_ptr<Media::Picture> &picture,
         const std::string &mime_type, bool isEdited = false);
+    EXPORT static int DealPicture(const std::string &mime_type, const std::string &path,
+        std::shared_ptr<Media::Picture> &picture);
 
 private:
     EXPORT static int DeleteFile(const std::string &fileName);
diff --git a/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp b/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp
index 9b8f20f..a33d5a8 100644
--- a/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp
+++ b/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp
@@ -20,6 +20,7 @@
 #include <sys/stat.h>
 
 #include "media_log.h"
+#include "media_file_utils.h"
 #include "database_adapter.h"
 #include "result_set_utils.h"
 #include "media_column.h"
@@ -90,6 +91,9 @@ int32_t FileUtils::SavePicture(const string &imageId, std::shared_ptr<Media::Pic
 {
     MediaLibraryTracer tracer;
     // 通过imageid获取fileid 获取uri
+    if (picture == nullptr) {
+        return -1;
+    }
     MEDIA_INFO_LOG("photoid: %{public}s", imageId.c_str());
     MediaLibraryCommand cmd(OperationObject::FILESYSTEM_PHOTO, OperationType::QUERY);
     string where = PhotoColumn::PHOTO_ID + " = ? ";
@@ -108,21 +112,17 @@ int32_t FileUtils::SavePicture(const string &imageId, std::shared_ptr<Media::Pic
     tracer.Finish();
     string path = GetStringVal(MediaColumn::MEDIA_FILE_PATH, resultSet);
     int fileId = GetInt32Val(MediaColumn::MEDIA_ID, resultSet);
+    string sourcePath = isEdited ? MediaLibraryAssetOperations::GetEditDataSourcePath(path) : path;
     //查询是否编辑 编辑目录下
     string mime_type = GetStringVal(MediaColumn::MEDIA_MIME_TYPE, resultSet);
     if (mime_type == "") {
         mime_type = "image/jpeg";
     }
-    Media::ImagePacker imagePacker;
-    Media::PackOption packOption;
-    packOption.format = mime_type;
-    packOption.needsPackProperties = true;
-    packOption.desiredDynamicRange = EncodeDynamicRange::AUTO;
-    imagePacker.StartPacking(path, packOption);
-    imagePacker.AddPicture(*(picture));
-    imagePacker.FinalizePacking();
-    MediaLibraryObjectUtils::ScanFileAsync(path, to_string(fileId), MediaLibraryApi::API_10);
-    MEDIA_INFO_LOG("SavePicture end");
+    int ret = DealPicture(mime_type, sourcePath, picture);
+    if (ret < 0) {
+        return ret;
+    }
+    MediaLibraryObjectUtils::ScanFileAsync(sourcePath, to_string(fileId), MediaLibraryApi::API_10);
     return 0;
 }
 
@@ -131,16 +131,46 @@ int32_t FileUtils::SavePicture(const string &path, std::shared_ptr<Media::Pictur
 {
     MEDIA_INFO_LOG("SavePicture width %{public}d, heigh %{public}d",
         picture->GetMainPixel()->GetWidth(), picture->GetMainPixel()->GetHeight());
+    return DealPicture(mime_type, path, picture);
+}
+
+int32_t FileUtils::DealPicture(const std::string &mime_type, const std::string &path,
+    std::shared_ptr<Media::Picture> &picture)
+{
+    MEDIA_DEBUG_LOG("DealPicture");
+    if (picture == nullptr) {
+        return -1;
+    }
     Media::ImagePacker imagePacker;
     Media::PackOption packOption;
     packOption.format = mime_type;
     packOption.needsPackProperties = true;
     packOption.desiredDynamicRange = EncodeDynamicRange::AUTO;
-    imagePacker.StartPacking(path, packOption);
-
+    size_t lastSlash = path.rfind('/');
+    CHECK_AND_RETURN_RET_LOG(lastSlash != string::npos && path.size() > (lastSlash + 1), E_INVALID_VALUES,
+        "Failed to check outputPath: %{public}s", path.c_str());
+    string tempOutputPath = path.substr(0, lastSlash) + "/temp_" + path.substr(lastSlash + 1);
+    int32_t ret = MediaFileUtils::CreateAsset(tempOutputPath);
+    CHECK_AND_RETURN_RET_LOG(ret == E_SUCCESS || ret == E_FILE_EXIST, E_HAS_FS_ERROR,
+        "Failed to create temp filters file %{private}s", tempOutputPath.c_str());
+    imagePacker.StartPacking(tempOutputPath, packOption);
     imagePacker.AddPicture(*(picture));
     imagePacker.FinalizePacking();
-    MEDIA_INFO_LOG("SavePicture end");
+    size_t size = -1;
+    MediaFileUtils::GetFileSize(tempOutputPath, size);
+    MEDIA_DEBUG_LOG("SavePicture end {public}%zu", size);
+    if (size == 0) {
+        CHECK_AND_PRINT_LOG(MediaFileUtils::DeleteFile(tempOutputPath),
+            "Failed to delete temp filters file, errno: %{public}d", errno);
+        return E_OK;
+    }
+    ret = rename(tempOutputPath.c_str(), path.c_str());
+    if (ret < 0) {
+        MEDIA_ERR_LOG("Failed to rename temp  file, ret: %{public}d, errno: %{public}d", ret, errno);
+        CHECK_AND_PRINT_LOG(MediaFileUtils::DeleteFile(tempOutputPath),
+            "Failed to delete temp file, errno: %{public}d", errno);
+        return ret;
+    }
     return 0;
 }
 } // namespace Media
diff --git a/interfaces/kits/js/include/media_library_napi.h b/interfaces/kits/js/include/media_library_napi.h
index 22494b4..cdfcdcb 100644
--- a/interfaces/kits/js/include/media_library_napi.h
+++ b/interfaces/kits/js/include/media_library_napi.h
@@ -369,6 +369,7 @@ private:
     static thread_local napi_ref sMovingPhotoEffectModeEnumRef_;
     static thread_local napi_ref sImageFileTypeEnumEnumRef_;
     static thread_local napi_ref sAuthorizationModeEnumRef_;
+    static thread_local napi_ref sImageFileTypeEnumEnumRef_;
 
     static std::mutex sOnOffMutex_;
 };
