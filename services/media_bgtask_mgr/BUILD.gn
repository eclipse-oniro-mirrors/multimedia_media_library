# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//foundation/multimedia/media_library/media_library.gni")

## Install .rc or .cfg file to /system/etc/init/
group("media_bgtask_mgr_grp") {
  deps = []
  deps += [
    ":media_bgtask_mgr_init",
    ":media_bgtask_mgr_service",
    ":task_schedule_param",
    "services/sa_profile:media_bgtask_mgr_profile",
  ]
  if (!defined(global_parts_info) || !defined(global_parts_info.customization_config_policy_ext)) {
    deps += [ ":schedule_policy" ]
  }
}

config("media_bgtask_mgr_client_config") {
  visibility = [ ":*" ]
  include_dirs =
      [ "${MEDIALIB_INTERFACES_PATH}/inner_api/media_bgtask_mgr/include" ]
}

ohos_prebuilt_etc("media_bgtask_mgr_init") {
  source = "services/media_bgtask_mgr.cfg"
  relative_install_dir = "init"
  part_name = "media_library"
  subsystem_name = "multimedia"
}

ohos_prebuilt_etc("task_schedule_param") {
  relative_install_dir = "medialibary_schedule_task_cfg"
  if (target_platform == "pc") {
    source = "config/pc/task_schedule_param.json"
  } else {
    source = "config/task_schedule_param.json"
  }
  subsystem_name = "multimedia"
  part_name = "media_library"
}

ohos_prebuilt_etc("schedule_policy") {
  relative_install_dir = "medialibary_schedule_task_cfg"
  if (target_platform == "pc") {
    source = "config/pc/schedule_policy.json"
  } else {
    source = "config/schedule_policy.json"
  }
  subsystem_name = "multimedia"
  part_name = "media_library"
}

ohos_shared_library("media_bgtask_mgr_service") {
  sources = [
    "services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "services/src/connect_remote_object/app_ops_connection.cpp",
    "services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "services/src/media_bgtask_schedule_service.cpp",
    "services/src/media_bgtask_schedule_service_ability.cpp",
    "services/src/media_bgtask_utils.cpp",
    "services/src/sa_ops_connection.cpp",
    "services/src/sa_ops_connection_manager.cpp",
    "services/src/schedule_policy.cpp",
    "services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "services/src/system_state_mgr.cpp",
    "services/src/task_info_mgr.cpp",
    "services/src/task_runner.cpp",
    "services/src/task_schedule_param_manager.cpp",
    "services/src/media_bgtask_dfx.cpp",
  ]

  include_dirs = [
    "services/include",
    "services/include/connect_remote_object",
    "services/include/schedule_service_manager",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
    "hisysevent:libhisysevent",
  ]
  defines = []
  if (defined(global_parts_info) &&
    defined(global_parts_info.customization_config_policy_ext)) {
    external_deps += [
      "config_policy:configpolicy_util",
      "config_policy_ext:config_policy_ext_utils",
    ]
    defines += ["CONFIG_POLICY_PUSH_SUPPORT"]
  }

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    stack_protector_ret = true
  }

  shlib_type = "sa"
  part_name = "media_library"
  subsystem_name = "multimedia"
}

ohos_shared_library("media_bgtask_mgr_client") {
  sources = [
    "services/src/media_bgtask_mgr_client.cpp",
    "services/src/mml_task_mgr_proxy.cpp",
  ]

  include_dirs = [
    "services/include",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/media_bgtask_mgr/include",
  ]

  public_configs = [ ":media_bgtask_mgr_client_config" ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    stack_protector_ret = true
  }

  version_script = "libmedia_bgtask_mgr_client.versionscript"

  part_name = "media_library"
  subsystem_name = "multimedia"
}
