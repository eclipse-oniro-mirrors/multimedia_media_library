# Copyright (C) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/memory_utils/purgeable_mem_config.gni")
import("//build/ohos.gni")
import("//foundation/multimedia/media_library/media_library.gni")

config("media_library_manager_config") {
  include_dirs =
      [ "${MEDIALIB_INTERFACES_PATH}/inner_api/media_library_helper/include" ]
}

ohos_shared_library("media_library_manager") {
  install_enable = true

  sources = [
    "./media_library_manager.cpp",
    "./src/media_library_tab_old_photos_client.cpp",
  ]

  include_dirs = [
    "./include",
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include",
    "${MEDIALIB_SERVICES_PATH}/media_thumbnail/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
  ]

  user_ipc_client_include_dirs = [
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/util",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_albums_manager/include/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/dto",
  ]

  media_albums_manager_vo_source = []

  media_assets_manager_vo_source = [
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/add_visit_count_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/create_asset_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_result_set_from_db_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_moving_photo_date_modified_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_result_set_from_photos_extend_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_uri_from_filepath_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_filepath_from_uri_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/close_asset_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_uris_by_old_uris_inner_vo.cpp",
  ]

  user_ipc_client_source = [ "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/ipc/util/user_inner_ipc_client.cpp" ]

  include_dirs += user_ipc_client_include_dirs
  sources += media_albums_manager_vo_source
  sources += media_assets_manager_vo_source
  sources += user_ipc_client_source

  public_configs = [ ":media_library_manager_config" ]

  deps = [ "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "relational_store:rdb_data_share_adapter",
    "samgr:samgr_proxy",
  ]

  ldflags = [ "-Wl,--gc-sections" ]

  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]

  cflags_cc = [ "-Os" ]

  if (!media_library_link_opt) {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
      ubsan = true
      boundary_sanitize = true
      stack_protector_ret = true
    }
  }

  defines = []
  defines += [ "MEDIALIBRARY_COMPATIBILITY=1" ]

  if (memory_utils_purgeable_ashmem_enable && defined(global_parts_info) &&
      defined(global_parts_info.resourceschedule_memmgr_override)) {
    defines += [ "IMAGE_PURGEABLE_PIXELMAP" ]
    external_deps += [
      "ffrt:libffrt",
      "memmgr_override:libpurgeablemem_plugin",
      "memmgr_override:purgeable_pixelmap_builder",
    ]
  }

  part_name = "media_library"
  subsystem_name = "multimedia"
}

ohos_shared_library("media_library_extend_manager") {
  install_enable = true

  sources = [ "./media_library_extend_manager.cpp" ]

  include_dirs = [
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include",
  ]

  user_ipc_client_include_dirs = [
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/util",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_albums_manager/include/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/dto",
  ]

  media_albums_manager_vo_source = []

  media_assets_manager_vo_source = [
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_result_set_from_db_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_result_set_from_photos_extend_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/cancel_photo_uri_permission_inner_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/grant_photo_uri_permission_inner_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/check_photo_uri_permission_inner_vo.cpp",
  ]

  user_ipc_client_source = [ "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/ipc/util/user_inner_ipc_client.cpp" ]

  include_dirs += user_ipc_client_include_dirs
  sources += media_albums_manager_vo_source
  sources += media_assets_manager_vo_source
  sources += user_ipc_client_source

  public_configs = [ ":media_library_manager_config" ]

  deps = [ "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "samgr:samgr_proxy",
  ]

  ldflags = [ "-Wl,--gc-sections" ]

  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]

  cflags_cc = [ "-Os" ]

  if (!media_library_link_opt) {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
      ubsan = true
      boundary_sanitize = true
      stack_protector_ret = true
    }
  }

  defines = []
  defines += [ "MEDIALIBRARY_COMPATIBILITY=1" ]

  part_name = "media_library"
  subsystem_name = "multimedia"
}

ohos_shared_library("media_library_custom_restore") {
  install_enable = true

  sources = [
    "./media_library_custom_restore.cpp",
    "./src/medialibrary_custom_restore_observer_manager.cpp",
  ]

  include_dirs = [
    "./include",
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
  ]

  user_ipc_client_include_dirs = [
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/util",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/vo",
    "${MEDIALIB_BUSINESS_PATH}/media_albums_manager/include/vo",
  ]

  media_albums_manager_vo_source = []

  media_assets_manager_vo_source = [
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/restore_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/stop_restore_vo.cpp",
  ]

  user_ipc_client_source = [ "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/ipc/util/user_inner_ipc_client.cpp" ]

  include_dirs += user_ipc_client_include_dirs
  sources += media_albums_manager_vo_source
  sources += media_assets_manager_vo_source
  sources += user_ipc_client_source

  public_configs = [ ":media_library_manager_config" ]

  deps = [ "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library" ]

  external_deps = [
    "c_utils:utils",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]

  ldflags = [ "-Wl,--gc-sections" ]

  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]

  cflags_cc = [ "-Os" ]

  if (!media_library_link_opt) {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
      ubsan = true
      boundary_sanitize = true
      stack_protector_ret = true
    }
  }

  part_name = "media_library"
  subsystem_name = "multimedia"
}
