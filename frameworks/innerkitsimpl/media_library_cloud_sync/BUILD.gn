# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/multimedia/media_library/media_library.gni")

config("media_library_cloud_sync_config") {
  include_dirs = [ "${MEDIALIB_INTERFACES_PATH}/inner_api/native/cloud_sync" ]
}

ohos_shared_library("media_library_cloud_sync") {
  install_enable = true

  include_ipc_client_dirs =
      [ "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/util" ]

  sources = [
    "${MEDIALIB_JS_PATH}/src/userfile_client.cpp",
    "./src/cloud_media_album_handler.cpp",
    "./src/cloud_media_data_client.cpp",
    "./src/cloud_media_data_client_handler.cpp",
    "./src/cloud_media_data_handler.cpp",
    "./src/cloud_media_photo_handler.cpp",
    "./src/cloud_media_thread_limiter.cpp",
    "./src/cloud_sync_data_convert/cloud_album_data_convert.cpp",
    "./src/cloud_sync_data_convert/cloud_data_convert_to_vo.cpp",
    "./src/cloud_sync_data_convert/cloud_file_data_convert.cpp",
    "./src/cloud_sync_data_convert/cloud_report_utils.cpp",
    "./src/json_helper.cpp",
    "./src/mdk_record/mdk_record.cpp",
    "./src/mdk_record/mdk_record_field.cpp",
    "./src/mdk_record_album_data.cpp",
    "./src/mdk_record_photos_data.cpp",
    "./src/mdk_record_reader.cpp",
    "./src/processor/cloud_media_data_client_handler_processor.cpp",
  ]

  include_dirs = [
    "./include",
    "./include/cloud_sync_data_convert",
    "./include/processor",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/native/cloud_sync",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_async_worker/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/media_library_helper/include",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include",
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INTERFACES_PATH}/innerkits/native/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include/napi",
  ]

  include_dirs += include_ipc_client_dirs

  source_ipc_client = [ "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/ipc/util/user_define_ipc_client.cpp" ]

  sources += source_ipc_client

  public_configs = [ ":media_library_cloud_sync_config" ]

  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension:medialibrary_data_extension",
    "${MEDIALIB_NATIVE_PATH}/media_library_asset_manager:media_library_asset_manager",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:napi_base_context",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "dfs_service:cloudfile_kit",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "relational_store:native_rdb",
    "relational_store:rdb_data_share_adapter",
    "samgr:samgr_proxy",
    "hisysevent:libhisysevent",
  ]

  ldflags = [ "-Wl,--gc-sections" ]

  cflags = [
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]

  cflags_cc = [ "-Os" ]

  if (!media_library_link_opt) {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
      ubsan = true
      boundary_sanitize = true
      stack_protector_ret = true
    }
  }

  part_name = "media_library"
  subsystem_name = "multimedia"
}
