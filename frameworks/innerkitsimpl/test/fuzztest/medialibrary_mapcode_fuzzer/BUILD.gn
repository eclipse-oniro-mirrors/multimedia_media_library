# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")

ohos_fuzztest("MediaLibraryMapCodeFuzzTest") {
  module_out_path = "media_library/media_library"
  fuzz_config_file = "."

  include_dirs = [
    "./include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_multistages_capture/include/dfx",
    "${MEDIALIB_SERVICES_PATH}/media_analysis_extension/include",

    "${MEDIALIB_CLOUD_SYNC_PATH}/include",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include",
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/config",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/event_handler",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/classify",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/geo_dictionary",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/geo_knowledge",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/highlight",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/log",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/report",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/restore",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_scanner/include/scanner",


    "${MEDIALIB_INTERFACES_PATH}/innerkits/native/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/operation",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/photo_album_operation",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/orm",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/orm/po",
    "${MEDIALIB_SERVICES_PATH}/media_analysis_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_async_worker/include",
    "${MEDIALIB_SERVICES_PATH}/media_thumbnail/include",
    "${MEDIALIB_SERVICES_PATH}/media_cloud_sync_notify_handle/include",
    "${MEDIALIB_SERVICES_PATH}/media_permission/include",
    "${MEDIALIB_SERVICES_PATH}/media_power_efficiency/include",
    "${MEDIALIB_SERVICES_PATH}/media_visit_count/include",
  ]

  sources = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/src/photo_file_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_analysis_extension/src/media_analysis_callback_stub.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_analysis_extension/src/media_analysis_helper.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_analysis_extension/src/media_analysis_proxy.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_cloud_sync/src/cloud_sync_utils/cloud_sync_utils.cpp",
    "${MEDIALIB_UTILS_PATH}/src/cpu_utils.cpp",
    "src/medialibrary_mapcode_fuzzer.cpp",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/operation/photo_map_code_column.cpp",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/operation/photo_map_code_operation.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore_map_code_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_scanner/src/scanner/scanner_map_code_utils.cpp",
  ]

  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension:medialibrary_data_extension",
  ]

  external_deps = [
    "ability_base:configuration",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:extensionkit_native",
    "ability_runtime:runtime",
    "ability_runtime:uri_permission_mgr",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "data_share:datashare_provider",
    "dfs_service:cloudsync_kit_inner",
    "eventhandler:libeventhandler",
    "file_api:filemgmt_libn",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "ipc:ipc_napi",
    "kv_store:distributeddata_inner",
    "napi:ace_napi",
    "player_framework:media_client",
    "relational_store:native_rdb",
    "relational_store:rdb_data_share_adapter",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm",

    "ability_runtime:napi_base_context",
    "background_task_mgr:bgtaskmgr_innerkits",
    "bundle_framework:appexecfwk_core",
    "e2fsprogs:libext2_uuid",
    "ffrt:libffrt",
    "hisysevent:libhisysevent",
    "i18n:intl_util",
    "libxml2:libxml2",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "zlib:shared_libz",
  ]
}
