# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")

ohos_fuzztest("MediaBgtaskMgrSaOpsConnectionFuzzTest") {
  module_out_path = "media_library/media_library"
  fuzz_config_file = "."

  include_dirs = [
    ".",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./mediabgtaskmgrsaopsconnection_fuzzer.cpp",
  ]

  deps = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]
}
