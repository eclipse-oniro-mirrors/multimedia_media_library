# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")

group("unittest") {
  testonly = true

  deps = [ ":medialibrary_backup_test" ]
}

ohos_unittest("medialibrary_backup_test") {
  module_out_path = "media_library/medialibraryextention"
  include_dirs = [
    "./include",
    "./include/database",
    "./include/report",
    "./include/restore",
    "./include/utils",
    "${MEDIALIB_CLOUD_SYNC_PATH}/include",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include",
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/config",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/event_handler",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/report",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include/restore",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_scanner/src/scanner/include",
    "../medialibrary_unittest_utils/include",
  ]

  sources = [
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/src/event_handler/album_plugin_table_event_handler.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/backup_database_helper.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/backup_database_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/backup_dfx_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/backup_file_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/base_restore.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/burst_key_generator.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/report/external_files_count_statistic.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/report/gallery_media_count_statistic.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/report/gallery_report.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/report/upgrade_restore_gallery_media_task.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/report/upgrade_restore_task_report.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/db_upgrade_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/gallery_db_upgrade.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/gallery_media_dao.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/media_library_db_upgrade.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/photo_album_dao.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/photo_album_restore.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/photos_clone.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/photos_dao.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/photos_restore.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/restore/tab_old_photos_restore.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_backup_extension/src/upgrade_restore.cpp",
    "../medialibrary_unittest_utils/src/medialibrary_unittest_utils.cpp",
    "./src/external_source.cpp",
    "./src/gallery_source.cpp",
    "./src/medialibrary_backup_test.cpp",
    "./src/report/upgrade_restore_gallery_media_task_test.cpp",
    "./src/restore/photo_album_dao_test.cpp",
    "./src/restore/photos_clone_test.cpp",
    "./src/restore/photos_restore_test.cpp",
  ]

  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension:medialibrary_data_extension",
  ]

  public_external_deps = [ "e2fsprogs:libext2_uuid" ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:runtime",
    "background_task_mgr:bgtaskmgr_innerkits",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "data_share:datashare_provider",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "libxml2:libxml2",
    "napi:ace_napi",
    "player_framework:media_client",
    "relational_store:native_rdb",
    "relational_store:rdb_data_share_adapter",
  ]

  defines = []

  if (defined(global_parts_info) &&
      defined(global_parts_info.filemanagement_dfs_service)) {
    defines += [ "CLOUD_SYNC_MANAGER" ]
    external_deps += [ "dfs_service:cloudsync_kit_inner" ]
  }

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}
