# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")

group("unittest") {
  testonly = true

  deps = [ ":medialibrary_dfx_test" ]
}

ohos_unittest("medialibrary_dfx_test") {
  module_out_path = "media_library/medialibraryextention"
  include_dirs = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "./include",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/distributed_media_library/database_manage",
  ]

  sources = [
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_analyzer.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_collector.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_database_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_manager.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_reporter.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_timer.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_utils.cpp",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/src/dfx_worker.cpp",
    "./src/medialibrary_dfx_test.cpp",
  ]
  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension:medialibrary_data_extension",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libprivacy_sdk",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "data_share:datashare_provider",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "kv_store:distributeddata_inner",
    "napi:ace_napi",
    "preferences:native_preferences",
    "relational_store:native_rdb",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}
