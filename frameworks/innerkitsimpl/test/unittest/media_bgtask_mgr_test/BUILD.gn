# Copyright (C) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")

group("unittest") {
  testonly = true

  deps = [
    ":media_bgtask_mgr_app_bgtask_schedule_stub_test",
    ":media_bgtask_mgr_app_ops_connect_ability_test",
    ":media_bgtask_mgr_app_ops_connection_test",
    ":media_bgtask_mgr_app_task_ops_proxy_test",
    ":media_bgtask_mgr_sa_ops_connection_test",
    ":media_bgtask_mgr_schedule_policy_test",
    ":media_bgtask_mgr_schedule_service_ability_test",
    ":media_bgtask_mgr_schedule_service_test",
    ":media_bgtask_mgr_system_state_mgr_test",
    ":media_bgtask_mgr_task_info_mgr_test",
    ":media_bgtask_mgr_task_runner_test",
    ":media_bgtask_mgr_task_schedule_param_manager_test",
    ":media_bgtask_mgr_utils_test",
  ]
}

ohos_unittest("media_bgtask_mgr_app_bgtask_schedule_stub_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_app_bgtask_schedule_stub_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_app_ops_connect_ability_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_app_ops_connect_ability_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_app_ops_connection_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_app_ops_connection_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_app_task_ops_proxy_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_app_task_ops_proxy_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_sa_ops_connection_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_sa_ops_connection_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_schedule_policy_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_schedule_policy_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_schedule_service_ability_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_schedule_service_ability_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_schedule_service_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_schedule_service_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_system_state_mgr_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_system_state_mgr_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_task_runner_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_task_runner_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_task_info_mgr_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_task_info_mgr_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_task_schedule_param_manager_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_task_schedule_param_manager_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  defines = []
  if (defined(global_parts_info) &&
  defined(global_parts_info.customization_config_policy_ext)) {
    external_deps += [
      "config_policy:configpolicy_util",
      "config_policy_ext:config_policy_ext_utils",
    ]
    defines += ["CONFIG_POLICY_PUSH_SUPPORT"]
  }

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}

ohos_unittest("media_bgtask_mgr_utils_test") {
  module_out_path = "media_library/media_library-asset"

  include_dirs = [
    "./include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/connect_remote_object",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/include/schedule_service_manager",
  ]

  sources = [
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connect_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/connect_remote_object/app_task_ops_proxy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_schedule_service_ability.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/media_bgtask_utils.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/sa_ops_connection_manager.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_policy.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/schedule_service_manager/app_bgtask_schedule_stub.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/system_state_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_info_mgr.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_runner.cpp",
    "${MEDIA_BGTASK_MGR_SERVICE_PATH}/services/src/task_schedule_param_manager.cpp",
    "./src/mediabgtaskmgr_utils_test.cpp",
  ]

  deps = [
    "${MEDIALIB_ROOT_SERVICES_PATH}/media_bgtask_mgr:media_bgtask_mgr_service",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_deps_wrapper",
    "ability_runtime:ability_manager",
    "ability_runtime:app_context",
    "ability_runtime:app_manager",
    "ability_runtime:connection_obs_manager",
    "ability_runtime:wantagent_innerkits",
    "access_token:libaccesstoken_sdk",
    "battery_manager:batterysrv_client",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_core",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "eventhandler:libeventhandler",
    "ffrt:libffrt",
    "googletest:gmock",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "json:nlohmann_json_static",
    "netmanager_base:net_conn_manager_if",
    "os_account:libaccountkits",
    "os_account:os_account_innerkits",
    "power_manager:powermgr_client",
    "resource_management:global_resmgr",
    "resource_schedule_service:ressched_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "thermal_manager:thermalsrv_client",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  use_exceptions = true

  cflags = [
    "-fPIC",
    "-Werror=unused",
    "-fno-access-control",  # Ignore Private Member Access Control
  ]

  cflags_cc = cflags

  resource_config_file =
      "${MEDIALIB_INNERKITS_PATH}/test/unittest/resources/ohos_test.xml"
}
