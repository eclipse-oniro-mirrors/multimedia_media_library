# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")

group("unittest") {
  testonly = true
  deps = [ ":media_assets_controller_service_test" ]
}

ohos_unittest("media_assets_controller_service_test") {
  module_out_path = "media_library/media_library-asset"
  include_dirs = [
    "${MEDIALIB_CLOUD_SYNC_PATH}/include",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include",
    "${MEDIALIB_INTERFACES_PATH}/kits/js/include/napi",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/config",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/event_handler",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/controller",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/dto",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/include/vo",
    "../medialibrary_unittest_utils/include",
    "./include",
    "../get_self_permissions/include",
  ]

  include_media_ipc = [
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/vo",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/util",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include/ipc/controller",
  ]

  include_dirs += include_media_ipc

  sources = [
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/adapted_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/add_image_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/asset_change_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/cancel_photo_uri_permission_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/clone_asset_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/cloud_enhancement_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/commit_edited_asset_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/create_asset_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/delete_photos_completed_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/delete_photos_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/form_info_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_asset_analysis_data_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_assets_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_cloud_enhancement_pair_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_cloudmedia_asset_status_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_edit_data_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/get_index_construct_progress_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/grant_photo_uri_permission_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/grant_photo_uris_permission_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/is_edited_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/modify_assets_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/query_cloud_enhancement_task_state_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/query_photo_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/request_content_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/request_edit_data_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/retain_cloud_media_asset_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/revert_to_original_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/save_camera_photo_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/start_asset_analysis_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/start_download_cloud_media_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/start_thumbnail_creation_task_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/stop_thumbnail_creation_task_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/submit_cache_vo.cpp",
    "${MEDIALIB_BUSINESS_PATH}/media_assets_manager/src/vo/trash_photos_vo.cpp",
    "${MEDIALIB_UTILS_PATH}/src/parameter_utils.cpp",
    "../medialibrary_unittest_utils/src/medialibrary_unittest_utils.cpp",
    "./src/asset_change_request_test.cpp",
    "./src/cancel_photo_uri_permission_test.cpp",
    "./src/clone_asset_test.cpp",
    "./src/cloud_enhancement_test.cpp",
    "./src/cloud_media_change_test.cpp",
    "./src/commit_edited_asset_test.cpp",
    "./src/create_asset_test.cpp",
    "./src/delete_asset_test.cpp",
    "./src/delete_photos_completed_test.cpp",
    "./src/form_info_test.cpp",
    "./src/get_asset_analysis_data_test.cpp",
    "./src/get_assets_test.cpp",
    "./src/get_cloud_enhancement_pair_test.cpp",
    "./src/get_index_construct_progress_test.cpp",
    "./src/grant_photo_uri_permission_test.cpp",
    "./src/grant_photo_uris_permission_test.cpp",
    "./src/media_assets_controller_test.cpp",
    "./src/modify_assets_test.cpp",
    "./src/query_cloud_enhancement_task_state_test.cpp",
    "./src/queue_edit_asset_status_test.cpp",
    "./src/request_content_test.cpp",
    "./src/request_image_test.cpp",
    "./src/revert_to_original_test.cpp",
    "./src/save_camera_photo_test.cpp",
    "./src/set_camera_shot_key_test.cpp",
    "./src/set_edit_data_test.cpp",
    "./src/set_favorite_test.cpp",
    "./src/set_hidden_test.cpp",
    "./src/set_location_test.cpp",
    "./src/set_title_test.cpp",
    "./src/set_user_comment_test.cpp",
    "./src/start_thumbnail_creation_task_test.cpp",
    "./src/stop_thumbnail_creation_task_test.cpp",
    "./src/sync_cloud_enhancement_task_status_test.cpp",
  ]
  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension:medialibrary_data_extension",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_context_native",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:napi_base_context",
    "ability_runtime:runtime",
    "ability_runtime:uri_permission_mgr",
    "access_token:el5_filekey_manager_sdk",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "data_share:datashare_provider",
    "e2fsprogs:libext2_uuid",
    "ffrt:libffrt",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "i18n:intl_util",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "kv_store:distributeddata_inner",
    "libxml2:libxml2",
    "napi:ace_napi",
    "os_account:libaccountkits",  # ohos_account
    "os_account:os_account_innerkits",  # os_account
    "player_framework:media_client",
    "relational_store:native_rdb",
    "relational_store:rdb_data_share_adapter",
    "zlib:shared_libz",
  ]
  defines = []
  if (defined(global_parts_info) &&
      defined(global_parts_info.filemanagement_dfs_service)) {
    defines += [ "CLOUD_SYNC_MANAGER" ]
    external_deps += [ "dfs_service:cloudsync_kit_inner" ]
  }
  defines += [ "MEDIALIBRARY_COMPATIBILITY=1" ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
}
