# Copyright (C) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
 
import("//build/test.gni")
import("//foundation/multimedia/media_library/media_library.gni")
 
group("unittest") {
  testonly = true
  deps = [ ":media_notification_register_manager_test" ]
}
 
ohos_unittest("media_notification_register_manager_test") {
  module_out_path = "media_library/media_library-asset"
  include_dirs = [
    "${MEDIALIB_NEW_SERVICES_PATH}/media_notification/include/register_manager",
    "${MEDIALIB_NEW_SERVICES_PATH}/media_notification/include/data",
    "${MEDIALIB_NEW_SERVICES_PATH}/media_notification/include",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "../medialibrary_unittest_utils/include",
    "./include",
    "../get_self_permissions/include",
  ]
 
  sources = [
    "../get_self_permissions/src/get_self_permissions.cpp",
    "../medialibrary_unittest_utils/src/medialibrary_unittest_utils.cpp",
    "src/media_notification_register_manager_test.cpp",
    "${MEDIALIB_NEW_SERVICES_PATH}/media_notification/src/register_manager/media_observer_manager.cpp",
    "${MEDIALIB_NEW_SERVICES_PATH}/media_notification/src/register_manager/notify_register_permission.cpp",
    "${MEDIALIB_NEW_SERVICES_PATH}/media_notification/src/register_manager/observer_callback_recipient.cpp",
  ]

  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension:medialibrary_data_extension",
  ]
 
  external_deps = [
    "access_token:libprivacy_sdk",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken_shared",
    "access_token:libtokensetproc_shared",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_context",
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "data_share:datashare_provider",
    "hilog:libhilog",
    "ipc:ipc_single",
    "ipc:ipc_napi",
  ]
 
  defines = []
  defines += [ "MEDIALIBRARY_COMPATIBILITY=1" ]
  defines += [ "MEDIA_REFRESH_TEST" ]
 
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
 
  cflags = [
    "-fno-access-control",  # Ignore Private Member Access Control
  ]
 
  cflags_cc = cflags
}