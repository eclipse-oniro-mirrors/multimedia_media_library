# Copyright (C) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos/ace/ace.gni")
import("//foundation/multimedia/media_library/media_library.gni")

config("ffi_config") {
  include_dirs = [
    "${MEDIALIB_INNERKITS_PATH}/medialibrary_data_extension/include",
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper/include",
    "${MEDIALIB_SERVICES_PATH}/media_dfx/include",
    "${MEDIALIB_SERVICES_PATH}/media_scanner/include/callback",
    "${MEDIALIB_SERVICES_PATH}/media_analysis_extension/include",
    "${MEDIALIB_SERVICES_PATH}/media_cloud_sync_notify_handle/include",
    "${MEDIALIB_SERVICES_PATH}/media_async_worker/include",
    "${MEDIALIB_UTILS_PATH}/include",
    "${MEDIALIB_INTERFACES_PATH}/inner_api/media_library_helper/include",
    "${MEDIALIB_INTERFACES_PATH}/innerkits/native/include",
    "${MEDIALIB_SERVICES_PATH}/media_library/include",
    "include",
    "${MEDIALIB_SERVICES_PATH}/media_thumbnail/include",
  ]

  if (media_library_feature_mtp) {
    include_dirs += [ "${MEDIALIB_MTP_PATH}/include" ]
  }

  ldflags = [ "-Wl,--gc-sections" ]

  cflags = [
    "-fvisibility=hidden",
    "-fdata-sections",
    "-ffunction-sections",
    "-Os",
  ]

  cflags_cc = [ "-fvisibility-inlines-hidden" ]
}

ohos_shared_library("cj_photoaccesshelper_ffi") {
  public_configs = [ ":ffi_config" ]

  include_dirs = [
    "include",
    "${MEDIALIB_SERVICES_PATH}/media_thumbnail/include",
  ]

  version_script = "libcj_photoaccesshelper_ffi.map"

  sources = [
    "src/confirm_callback.cpp",
    "src/delete_callback.cpp",
    "src/fetch_result_impl.cpp",
    "src/media_album_change_request_impl.cpp",
    "src/media_asset_change_request_impl.cpp",
    "src/media_asset_manager_ffi.cpp",
    "src/media_change_request_impl.cpp",
    "src/modal_ui_callback.cpp",
    "src/moving_photo_impl.cpp",
    "src/photo_accesshelper_ffi.cpp",
    "src/photo_accesshelper_impl.cpp",
    "src/photo_accesshelper_utils.cpp",
    "src/photo_album_impl.cpp",
    "src/photo_asset_impl.cpp",
  ]

  deps = [
    "${MEDIALIB_INNERKITS_PATH}/media_library_helper:media_library",
    "${MEDIALIB_INTERFACES_PATH}/kits/js:medialibrary_nutils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:dataobs_manager",
    "ability_runtime:napi_base_context",
    "ability_runtime:service_extension",
    "ability_runtime:ui_extension",
    "access_token:libaccesstoken_sdk",
    "access_token:libprivacy_sdk",
    "access_token:libtokenid_sdk",
    "app_file_service:fileuri_native",
    "c_utils:utils",
    "data_share:cj_data_share_predicates_ffi",
    "data_share:datashare_common",
    "data_share:datashare_consumer",
    "e2fsprogs:libext2_uuid",
    "hilog:libhilog",
    "image_framework:cj_image_ffi",
    "image_framework:image",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "ipc:rpc",
    "kv_store:distributeddata_inner",
    "napi:ace_napi",
    "napi:cj_bind_ffi",
    "napi:cj_bind_native",
    "player_framework:media_client",
    "relational_store:native_rdb",
    "relational_store:rdb_data_share_adapter",
    "window_manager:libwm",
  ]

  defines = []
  defines += [ "MEDIALIBRARY_COMPATIBILITY=1" ]
  if (media_library_feature_mtp) {
    defines += [ "MEDIALIBRARY_MTP_ENABLE=1" ]
  }
  if (!media_library_link_opt) {
    sanitize = {
      cfi = true
      cfi_cross_dso = true
      debug = false
      integer_overflow = true
      ubsan = true
      boundary_sanitize = true
      stack_protector_ret = true
    }
  }

  if (ability_runtime_graphics) {
    external_deps += [
      "ace_engine:ace_uicontent",
      "image_framework:image_native",
    ]
    cflags_cc = [ "-DHAS_ACE_ENGINE_PART" ]
  }

  innerapi_tags = [ "platformsdk" ]

  subsystem_name = "multimedia"
  part_name = "media_library"
}
