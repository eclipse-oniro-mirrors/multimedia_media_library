# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//ark/ts2abc/ts2panda/ts2abc_config.gni")
import("//build/ohos.gni")
import("//build/ohos/ace/ace.gni")
import("//foundation/ace/ace_engine/ace_config.gni")

js_declaration("medialibrary_js") {
  part_name = "multimedia_media_library_standard"
  sources = [ "./@ohos.multimedia.mediaLibrary.d.ts" ]
}

ohos_copy("medialibrary_declaration") {
  sources = [ "./@ohos.multimedia.mediaLibrary.d.ts" ]
  outputs = [ target_out_dir + "/$target_name/" ]
  module_source_dir = target_out_dir + "/$target_name"
  module_install_name = ""
}

# compile .js to .abc.
action("gen_medialibraryinf_abc") {
  visibility = [ ":*" ]
  script = "//ark/ts2abc/ts2panda/scripts/generate_js_bytecode.py"

  args = [
    "--src-js",
    rebase_path(
        "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/medialibraryinf.js"),
    "--dst-file",
    rebase_path(target_out_dir + "/medialibraryinf.abc"),
    "--node",
    rebase_path("${node_path}"),
    "--frontend-tool-path",
    rebase_path("${ts2abc_build_path}"),
    "--node-modules",
    rebase_path("${node_modules}"),
    "--module",
  ]
  deps = [ "//ark/ts2abc/ts2panda:ark_ts2abc_build" ]

  inputs = [ "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/medialibraryinf.js" ]
  outputs = [ target_out_dir + "/medialibraryinf.abc" ]
}

base_output_path = get_label_info(":medialibraryinf_js", "target_out_dir")
medialibraryinf_obj_path = base_output_path + "/medialibraryinf.o"
gen_js_obj("medialibraryinf_js") {
  input = "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/medialibraryinf.js"
  output = medialibraryinf_obj_path
  dep = ":gen_medialibraryinf_abc"
}

abc_output_path = get_label_info(":medialibraryinf_abc", "target_out_dir")
medialibraryinf_abc_obj_path = abc_output_path + "/medialibraryinf_abc.o"
gen_js_obj("medialibraryinf_abc") {
  input = "$target_out_dir/medialibraryinf.abc"
  output = medialibraryinf_abc_obj_path
  dep = ":gen_medialibraryinf_abc"
}

ohos_shared_library("medialibrary") {
  include_dirs = [
    "//drivers/peripheral/display/interfaces/include",
    "//drivers/peripheral/base",
    "//foundation/multimedia/media_standard/interfaces/innerkits/native/media/include",
    "//foundation/multimedia/medialibrary_standard/interfaces/kits/js/medialibrary/include",
    "//third_party/node/src",
    "//foundation/ace/napi/interfaces/kits",
    "//foundation/multimedia/medialibrary_standard/interfaces/innerkits/native/include",
    "//foundation/multimedia/medialibrary_standard/services/media_library_service/include/client",
    "//foundation/distributeddatamgr/appdatamgr/interfaces/innerkits/native_rdb/include",
    "//foundation/aafwk/standard/frameworks/kits/ability/native/include",
    "//foundation/multimedia/medialibrary_standard/frameworks/innerkitsimpl/medialibrary_data_ability/include",
    "//foundation/aafwk/standard/interfaces/innerkits/dataobs_manager/include",
    "//foundation/multimedia/image_standard/interfaces/innerkits/include",
    "//foundation/multimedia/image_standard/interfaces/kits/js/common/include",
    "//foundation/distributedhardware/devicemanager/interfaces/inner_kits/native_cpp/include",
  ]

  sources = [
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/album_asset_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/album_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/audio_asset_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/avmetadatahelper_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/fetch_file_result_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/file_asset_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/image_asset_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/media_asset_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/media_library_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/media_scanner_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/native_module_ohos_medialibrary.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/smart_album_napi.cpp",
    "//foundation/multimedia/medialibrary_standard/frameworks/kitsimpl/medialibrary/src/video_asset_napi.cpp",
  ]
  if (target_cpu == "arm") {
    ldflags = [ "-Wl" ]
  } else if (target_cpu == "arm64") {
    ldflags = [ "-Wl" ]
  }

  deps = [
    ":medialibraryinf_abc",
    ":medialibraryinf_js",
    "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
    "//foundation/aafwk/standard/frameworks/kits/appkit:appkit_native",
    "//foundation/aafwk/standard/interfaces/innerkits/base:base",
    "//foundation/aafwk/standard/interfaces/innerkits/dataobs_manager:dataobs_manager",
    "//foundation/aafwk/standard/interfaces/innerkits/want:want",
    "//foundation/ace/napi:ace_napi",
    "//foundation/multimedia/image_standard/interfaces/innerkits:image",
    "//foundation/multimedia/media_standard/interfaces/innerkits/native/media:media_client",
    "//foundation/multimedia/medialibrary_standard/frameworks/innerkitsimpl/media_library:media_library",
    "//foundation/multimedia/medialibrary_standard/frameworks/innerkitsimpl/medialibrary_data_ability:medialibrary_data_ability",
    "//foundation/multimedia/medialibrary_standard/services/media_library_service:medialibrary_proxy",
    "//foundation/multimedia/medialibrary_standard/services/media_scanner_service/client:media_scanner_client",
    "//utils/native/base:utils",
  ]

  external_deps = [
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:napi_base_context",
    "bytrace_standard:bytrace_core",
    "hiviewdfx_hilog_native:libhilog",
    "native_appdatamgr:native_appdatafwk",
    "native_appdatamgr:native_dataability",
    "native_appdatamgr:native_rdb",
    "permission_standard:libpermissionsdk_standard",
  ]

  relative_install_dir = "module/multimedia"
  subsystem_name = "multimedia"
  part_name = "multimedia_media_library_standard"
}
