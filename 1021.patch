diff --git a/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp b/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp
index 9bdef6226..73894e7f4 100644
--- a/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp
+++ b/frameworks/innerkitsimpl/media_library_helper/src/media_photo_asset_proxy.cpp
@@ -132,6 +132,7 @@ void PhotoAssetProxy::CreatePhotoAsset(const sptr<PhotoProxy> &photoProxy)
     DataShare::DataShareValuesBucket values;
     values.Put(MediaColumn::MEDIA_NAME, displayName);
     values.Put(MediaColumn::MEDIA_TYPE, static_cast<int32_t>(mediaType));
+    SetPhotoIdForAsset(photoProxy, values);
     if (cameraShotType_ == CameraShotType::MOVING_PHOTO) {
         values.Put(PhotoColumn::PHOTO_SUBTYPE, static_cast<int32_t>(PhotoSubType::MOVING_PHOTO));
     }
@@ -165,6 +166,22 @@ static bool isHighQualityPhotoExist(string uri)
     return MediaFileUtils::IsFileExists(filePathTemp) || MediaFileUtils::IsFileExists(filePath);
 }
 
+void PhotoAssetProxy::SetPhotoIdForAsset(const sptr<PhotoProxy> &photoProxy, DataShare::DataShareValuesBucket &values)
+{
+    if (photoProxy->GetPhotoId() == "") {
+        stringstream result;
+        string displayName = photoProxy->GetTitle();
+        for (int i = 0; i < displayName.length(); i++) {
+            if (isdigit(displayName[i])) {
+                result << displayName[i];
+            }
+        }
+        values.Put(PhotoColumn::PHOTO_ID, result.str());
+    } else {
+        values.Put(PhotoColumn::PHOTO_ID, photoProxy->GetPhotoId());
+    }
+}
+
 int32_t CloseFd(const shared_ptr<DataShare::DataShareHelper> &dataShareHelper, const string &uri, const int32_t fd)
 {
     MediaLibraryTracer tracer;
@@ -354,9 +371,6 @@ int32_t PhotoAssetProxy::UpdatePhotoQuality(shared_ptr<DataShare::DataShareHelpe
     predicates.SetWhereArgs({ to_string(fileId) });
 
     DataShare::DataShareValuesBucket valuesBucket;
-    string photoId = (photoProxy->GetPhotoId() == "" || subType == static_cast<int32_t>(PhotoSubType::BURST)) ?
-        (to_string(fileId) + "_") : photoProxy->GetPhotoId();
-    valuesBucket.Put(PhotoColumn::PHOTO_ID, photoId);
     valuesBucket.Put(PhotoColumn::PHOTO_DEFERRED_PROC_TYPE, static_cast<int32_t>(photoProxy->GetDeferredProcType()));
     valuesBucket.Put(MediaColumn::MEDIA_ID, fileId);
     valuesBucket.Put(PhotoColumn::PHOTO_SUBTYPE, static_cast<int32_t>(subType));
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_manager_thread.h b/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_manager_thread.h
index d78ee5cd2..b113f968c 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_manager_thread.h
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/include/picture_manager_thread.h
@@ -70,6 +70,7 @@ private:
     static std::unique_ptr<PictureManagerThread> instance_;
     static std::mutex mutex_;
     sptr<PictureDataOperations> pictureDataOperations_;
+    int32_t lastPendingTaskSize_ = 0;
 }; // class PictureManagerThread
 } // namespace Media
 }  // namespace OHOS
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_asset_operations.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_asset_operations.cpp
index 3ccb3d2f1..77d5900b1 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_asset_operations.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_asset_operations.cpp
@@ -662,13 +662,7 @@ static void HandleBurstPhoto(MediaLibraryCommand &cmd, ValuesBucket &outValues,
     if (dirty != static_cast<int32_t>(DirtyTypes::TYPE_NEW)) {
         outValues.PutInt(PhotoColumn::PHOTO_DIRTY, dirty);
     }
-    stringstream result;
-    for (int i = 0; i < displayName.length(); i++) {
-        if (isdigit(displayName[i])) {
-            result << displayName[i];
-        }
-    }
-    outValues.Put(PhotoColumn::PHOTO_ID, result.str());
+    outValues.PutInt(PhotoColumn::PHOTO_QUALITY, static_cast<int32_t>(MultiStagesPhotoQuality::FULL));
 }
 
 static void HandleIsTemp(MediaLibraryCommand &cmd, ValuesBucket &outValues)
@@ -684,6 +678,12 @@ static void HandleIsTemp(MediaLibraryCommand &cmd, ValuesBucket &outValues)
         value.GetBool(isTemp);
     }
     outValues.PutBool(PhotoColumn::PHOTO_IS_TEMP, isTemp);
+
+    string photoId = "";
+    if (cmd.GetValueBucket().GetObject(PhotoColumn::PHOTO_ID, value)) {
+        value.GetString(photoId);
+    }
+    outValues.PutString(PhotoColumn::PHOTO_ID, photoId);
     return;
 }
 
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp
index 1ec8ac1f3..d1a49f79e 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/medialibrary_photo_operations.cpp
@@ -2362,7 +2362,6 @@ int32_t MediaLibraryPhotoOperations::GetPicture(const int32_t &fileId, std::shar
     MEDIA_INFO_LOG("photoId: %{public}s", photoId.c_str());
     auto pictureManagerThread = PictureManagerThread::GetInstance();
     if (pictureManagerThread != nullptr) {
-        pictureManagerThread->Start();
         picture = pictureManagerThread->GetDataWithImageId(photoId, isCleanImmediately);
     }
     if (picture == nullptr) {
@@ -2396,7 +2395,6 @@ int32_t MediaLibraryPhotoOperations::FinishRequestPicture(MediaLibraryCommand &c
     MEDIA_INFO_LOG("photoId: %{public}s", photoId.c_str());
     auto pictureManagerThread = PictureManagerThread::GetInstance();
     if (pictureManagerThread != nullptr) {
-        pictureManagerThread->Start();
         pictureManagerThread->FinishAccessingPicture(photoId);
     }
     return E_OK;
@@ -2431,7 +2429,6 @@ int32_t MediaLibraryPhotoOperations::SavePicture(const int32_t &fileType, const
     if (pictureManagerThread == nullptr) {
         return E_ERR;
     }
-    pictureManagerThread->Start();
     std::shared_ptr<Media::Picture> picture;
     std::string photoId;
     if (GetPicture(fileId, picture, false, photoId) != E_OK) {
@@ -2509,7 +2506,6 @@ int32_t MediaLibraryPhotoOperations::AddFiltersExecute(MediaLibraryCommand& cmd,
         int32_t ret = MediaChangeEffect::TakeEffectForPicture(picture, editData);
         auto pictureManagerThread = PictureManagerThread::GetInstance();
         if (pictureManagerThread != nullptr) {
-            pictureManagerThread->Start();
             pictureManagerThread->FinishAccessingPicture(photoId);
         }
         MediaLibraryObjectUtils::ScanFileAsync(sourcePath, to_string(fileId), MediaLibraryApi::API_10);
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp
index 3fbc416dd..325f35f43 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_data_operations.cpp
@@ -319,7 +319,8 @@ int32_t PictureDataOperations::AddSavePictureTask(sptr<PicturePair>& picturePair
 
 int32_t PictureDataOperations::GetPendingTaskSize()
 {
-    return taskSize;
+    lock_guard<mutex> lock(pictureMapMutex_);
+    return lowQualityPictureMap_.size() + highQualityPictureMap_.size();
 }
 
 void PictureDataOperations::DeleteDataWithImageId(const std::string& imageId, PictureType pictureType)
diff --git a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_manager_thread.cpp b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_manager_thread.cpp
index 52e498b06..8db09ac96 100644
--- a/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_manager_thread.cpp
+++ b/frameworks/innerkitsimpl/medialibrary_data_extension/src/picture_manager_thread.cpp
@@ -57,21 +57,18 @@ State PictureManagerThread::State() const
 
 void PictureManagerThread::Start()
 {
-    MEDIA_INFO_LOG("enter ");
     unique_lock<mutex> locker(runningMutex_);
     if (pictureDataOperations_ == nullptr) {
         pictureDataOperations_ = new PictureDataOperations();
     }
+    if (pauseFlag_) {
+        Stop();
+    }
     if (thread_ == nullptr) {
         thread_ = std::make_unique<std::thread>(&PictureManagerThread::Run, this);
         pauseFlag_ = false;
         stopFlag_ = false;
         state_ = State::RUNNING;
-    } else if (stopFlag_) {
-        Run();
-        pauseFlag_ = false;
-        stopFlag_ = false;
-        state_ = State::RUNNING;
     }
 }
 
@@ -82,7 +79,9 @@ void PictureManagerThread::Stop()
         pauseFlag_ = false;
         stopFlag_ = true;
         condition_.notify_all();  // Notify one waiting thread, if there is one.
-        thread_->join(); // wait for thread finished
+        if (thread_->joinable()) {
+            thread_->join(); // wait for thread finished
+        }
         thread_ = nullptr;
         state_ = State::STOPPED;
     }
@@ -110,6 +109,8 @@ void PictureManagerThread::Resume()
 void PictureManagerThread::Run()
 {
     MEDIA_INFO_LOG("enter thread run:");
+    string name("PictureManagerThread");
+    pthread_setname_np(pthread_self(), name.c_str());
     while (!stopFlag_) {
         if (pictureDataOperations_ == nullptr) {
             pictureDataOperations_ = new PictureDataOperations();
@@ -117,14 +118,19 @@ void PictureManagerThread::Run()
         pictureDataOperations_->CleanDateForPeriodical();
         unique_lock<mutex> locker(threadMutex_);
         condition_.wait_for(locker, std::chrono::seconds(1)); // 实际1S扫描一次
+        int32_t taskSize = pictureDataOperations_->GetPendingTaskSize();
+        if (lastPendingTaskSize_ != 0 && taskSize == 0) {
+            pauseFlag_ = true;
+            return;
+        }
+        lastPendingTaskSize_ = taskSize;
     }
-    pauseFlag_ = false;
-    stopFlag_ = false;
 }
 
 void PictureManagerThread::InsertPictureData(const std::string& imageId, sptr<PicturePair>& PicturePair,
     PictureType pictureType)
 {
+    Start();
     if (pictureDataOperations_ == nullptr) {
         MEDIA_ERR_LOG("InsertPictureData failed, pictureDataOperations_ is null");
         return;
diff --git a/frameworks/services/media_multistages_capture/include/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.h b/frameworks/services/media_multistages_capture/include/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.h
index 1db0b3244..d3e55295c 100644
--- a/frameworks/services/media_multistages_capture/include/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.h
+++ b/frameworks/services/media_multistages_capture/include/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.h
@@ -43,7 +43,7 @@ public:
 private:
     EXPORT int32_t UpdatePhotoQuality(const std::string &photoId);
     EXPORT void UpdateCEAvailable(const std::string &photoId);
-    void GetCommandByImageId(const std::string &imageId, MediaLibraryCommand &cmd, string &photoId);
+    void GetCommandByImageId(const std::string &imageId, MediaLibraryCommand &cmd);
     void UpdateHighQualityPictureInfo(const std::string &imageId, bool isCloudEnhancementAvailable);
     void NotifyIfTempFile(std::shared_ptr<NativeRdb::ResultSet> resultSet);
 };
diff --git a/frameworks/services/media_multistages_capture/src/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.cpp b/frameworks/services/media_multistages_capture/src/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.cpp
index 661e06d13..0c19ea814 100644
--- a/frameworks/services/media_multistages_capture/src/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.cpp
+++ b/frameworks/services/media_multistages_capture/src/deferred_processing/multistages_capture_deferred_photo_proc_session_callback.cpp
@@ -223,7 +223,7 @@ void MultiStagesCaptureDeferredPhotoProcSessionCallback::OnProcessImageDone(cons
 }
 
 void MultiStagesCaptureDeferredPhotoProcSessionCallback::GetCommandByImageId(const std::string &imageId,
-    MediaLibraryCommand &cmd, string &photoId)
+    MediaLibraryCommand &cmd)
 {
     size_t slashIndex = imageId.rfind("/");
     string where = "";
@@ -239,11 +239,6 @@ void MultiStagesCaptureDeferredPhotoProcSessionCallback::GetCommandByImageId(con
         string fileId = MediaFileUtils::GetIdFromUri(imageId);
         where = PhotoColumn::MEDIA_ID + " = ? ";
         whereArgs = { fileId };
-        photoId = result.str();
-    } else {
-        where = PhotoColumn::PHOTO_ID + " = ? ";
-        whereArgs = { imageId };
-        photoId = imageId;
     }
     cmd.GetAbsRdbPredicates()->SetWhereClause(where);
     cmd.GetAbsRdbPredicates()->SetWhereArgs(whereArgs);
@@ -273,10 +268,9 @@ void MultiStagesCaptureDeferredPhotoProcSessionCallback::OnDeliveryLowQualityIma
     MediaLibraryTracer tracer;
     tracer.Start("OnDeliveryLowQualityImage " + imageId);
     MediaLibraryCommand cmd(OperationObject::FILESYSTEM_PHOTO, OperationType::QUERY);
-    string photoId = "";
-    GetCommandByImageId(imageId, cmd, photoId);
+    GetCommandByImageId(imageId, cmd);
     vector<string> columns { MediaColumn::MEDIA_ID, MediaColumn::MEDIA_FILE_PATH, PhotoColumn::PHOTO_EDIT_TIME,
-        PhotoColumn::PHOTO_SUBTYPE, PhotoColumn::PHOTO_QUALITY};
+        PhotoColumn::PHOTO_SUBTYPE, PhotoColumn::PHOTO_ID};
     tracer.Start("Query");
     auto resultSet = DatabaseAdapter::Query(cmd, columns);
     if (resultSet == nullptr || resultSet->GoToFirstRow() != E_OK) {
@@ -285,7 +279,7 @@ void MultiStagesCaptureDeferredPhotoProcSessionCallback::OnDeliveryLowQualityIma
         return;
     }
     tracer.Finish();
-    int32_t photoQuality = GetInt32Val(PhotoColumn::PHOTO_QUALITY, resultSet);
+    string photoId = GetStringVal(PhotoColumn::PHOTO_ID, resultSet);
     string data = GetStringVal(MediaColumn::MEDIA_FILE_PATH, resultSet);
     bool isEdited = (GetInt64Val(PhotoColumn::PHOTO_EDIT_TIME, resultSet) > 0);
     MultiStagesPhotoCaptureManager::GetInstance().DealLowQualityPicture(photoId, std::move(picture), isEdited);
diff --git a/frameworks/services/media_multistages_capture/src/multistages_photo_capture_manager.cpp b/frameworks/services/media_multistages_capture/src/multistages_photo_capture_manager.cpp
index aa135e9e0..9add9796d 100644
--- a/frameworks/services/media_multistages_capture/src/multistages_photo_capture_manager.cpp
+++ b/frameworks/services/media_multistages_capture/src/multistages_photo_capture_manager.cpp
@@ -148,7 +148,6 @@ void MultiStagesPhotoCaptureManager::DealLowQualityPicture(const std::string &im
     if (pictureManagerThread == nullptr) {
         return;
     }
-    pictureManagerThread->Start();
     if (pictureManagerThread->IsExsitPictureByImageId(imageId)) {
         return;
     }
@@ -180,7 +179,6 @@ void MultiStagesPhotoCaptureManager::SaveLowQualityPicture(const std::string &im
     if (pictureManagerThread == nullptr) {
         return;
     }
-    pictureManagerThread->Start();
     pictureManagerThread->SaveLowQualityPicture(imageId);
 }
 
@@ -193,7 +191,6 @@ void MultiStagesPhotoCaptureManager::DealHighQualityPicture(const std::string &i
     if (pictureManagerThread == nullptr) {
         return;
     }
-    pictureManagerThread->Start();
     // 将低质量图存入缓存
     time_t currentTime;
     if ((currentTime = time(NULL)) == -1) {
@@ -324,7 +321,6 @@ void MultiStagesPhotoCaptureManager::AddImage(MediaLibraryCommand &cmd)
     if (pictureManagerThread == nullptr) {
         return;
     }
-    pictureManagerThread->Start();
     if (photoQuality == static_cast<int32_t>(MultiStagesPhotoQuality::FULL)) {
         pictureManagerThread->SavePictureWithImageId(photoId);
         UpdatePictureQuality(photoId);
diff --git a/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp b/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp
index 076315de5..2a8b33a3d 100644
--- a/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp
+++ b/frameworks/services/media_multistages_capture/src/utils/file_utils.cpp
@@ -164,7 +164,7 @@ int32_t FileUtils::DealPicture(const std::string &mime_type, const std::string &
         "Failed to check outputPath: %{public}s", path.c_str());
     string tempOutputPath = path.substr(0, lastSlash) + "/temp_" + path.substr(lastSlash + 1);
     int32_t ret = MediaFileUtils::CreateAsset(tempOutputPath);
-    CHECK_AND_RETURN_RET_LOG(ret == E_SUCCESS || ret == E_FILE_EXIST, E_HAS_FS_ERROR,
+    CHECK_AND_RETURN_RET_LOG(ret == E_SUCCESS, E_HAS_FS_ERROR,
         "Failed to create temp filters file %{private}s", tempOutputPath.c_str());
     imagePacker.StartPacking(tempOutputPath, packOption);
     imagePacker.AddPicture(*(picture));
@@ -178,13 +178,13 @@ int32_t FileUtils::DealPicture(const std::string &mime_type, const std::string &
         return E_OK;
     }
     ret = rename(tempOutputPath.c_str(), path.c_str());
-    if (ret < 0) {
-        MEDIA_ERR_LOG("Failed to rename temp  file, ret: %{public}d, errno: %{public}d", ret, errno);
-        CHECK_AND_PRINT_LOG(MediaFileUtils::DeleteFile(tempOutputPath),
-            "Failed to delete temp file, errno: %{public}d", errno);
-        return ret;
+    if (MediaFileUtils::IsFileExists(tempOutputPath)) {
+        MEDIA_INFO_LOG("file: %{public}s exists and needs to be deleted", tempOutputPath.c_str());
+        if (!MediaFileUtils::DeleteFile(tempOutputPath)) {
+            MEDIA_ERR_LOG("delete file: %{public}s failed", tempOutputPath.c_str());
+        }
     }
-    return 0;
+    return ret;
 }
 
 int32_t FileUtils::SaveVideo(const std::string &filePath, bool isEdited)
diff --git a/interfaces/inner_api/media_library_helper/include/media_photo_asset_proxy.h b/interfaces/inner_api/media_library_helper/include/media_photo_asset_proxy.h
index 68f6ed1b7..66cb8275e 100644
--- a/interfaces/inner_api/media_library_helper/include/media_photo_asset_proxy.h
+++ b/interfaces/inner_api/media_library_helper/include/media_photo_asset_proxy.h
@@ -69,6 +69,8 @@ private:
     static void SetShootingModeAndGpsInfo(const uint8_t *data, uint32_t size,
         const sptr<PhotoProxy> &photoProxy, int fd);
     static std::string LocationValueToString(double value);
+    
+    void SetPhotoIdForAsset(const sptr<PhotoProxy> &photoProxy, DataShare::DataShareValuesBucket &values);
 
     sptr<PhotoProxy> photoProxy_;
     int32_t fileId_ {0};
